<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo静态博客</title>
      <link href="/2024/06/26/hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/06/26/hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm i -g hexo</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line">cd blog</span><br><span class="line"># 生成站点</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx笔记</title>
      <link href="/2024/06/26/Nginx%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/06/26/Nginx%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Nginx进程，一般可以看到master和worker进程</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口占用</span></span><br><span class="line">sudo lsof -i:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制Nginx，-s singal</span></span><br><span class="line">nginx -s [...这里参数看下面表格]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">sudo nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路径信息</span></span><br><span class="line"><span class="comment"># --conf-path= ... // 配置路径，和安装方式，操作系统有关</span></span><br><span class="line">nginx -V</span><br><span class="line">sudo nginx -t // 也可以看到配置路径</span><br><span class="line"></span><br><span class="line">code ...  // vscode 打开配置文件</span><br></pre></td></tr></table></figure><span id="more"></span><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>nginx -s stop</code></td><td align="left">快速关闭 Nginx，可能不保存相关信息，并迅速终止 web 服务。（立即停止）</td></tr><tr><td align="left"><code>nginx -s quit</code></td><td align="left">平稳关闭 Nginx，保存相关信息，有安排的结束 web 服务。(优雅停止)</td></tr><tr><td align="left"><code>nginx -s reload</code></td><td align="left">因改变了 Nginx 相关配置，需要<strong>重新加载配置</strong>而重载。</td></tr><tr><td align="left"><code>nginx -s reopen</code></td><td align="left"><strong>重新打开日志文件</strong>。</td></tr><tr><td align="left"><code>nginx -c filename</code></td><td align="left">为 Nginx 指定一个配置文件，来代替缺省的。</td></tr><tr><td align="left"><code>nginx -t</code></td><td align="left">不运行，仅仅测试配置文件。Nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</td></tr><tr><td align="left"><code>nginx -v</code></td><td align="left">显示 Nginx 的版本。</td></tr><tr><td align="left"><code>nginx -V</code></td><td align="left">显示 Nginx 的版本，编译器版本和配置参数。</td></tr></tbody></table><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># sites-available</span><br><span class="line">location / &#123;</span><br><span class="line">   # 默认的根路径，修改这个就可以</span><br><span class="line">   root /var/www/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> -rfa ./etsuyou.github.io/* /var/www/site1</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在一个 80 端口的公网 IP 上部署多个静态网页，可以通过以下几种方法实现：</p><h3 id="方法一：使用-Nginx-反向代理和虚拟主机"><a href="#方法一：使用-Nginx-反向代理和虚拟主机" class="headerlink" title="方法一：使用 Nginx 反向代理和虚拟主机"></a>方法一：使用 Nginx 反向代理和虚拟主机</h3><p>Nginx 是一个高性能的 HTTP 服务器和反向代理服务器，可以通过配置虚拟主机来实现多个静态网页的托管。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p><strong>安装 Nginx</strong><br>在 Ubuntu 上安装 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li><li><p><strong>配置虚拟主机</strong><br>在 Nginx 的配置目录中为每个静态网页创建一个配置文件。例如，假设你有两个静态网页 <code>site1</code> 和 <code>site2</code>。</p><p>创建两个配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/site1</span><br><span class="line">sudo nano /etc/nginx/sites-available/site2</span><br></pre></td></tr></table></figure><p>配置文件内容示例：</p><p><code>site1</code> 的配置文件 (<code>/etc/nginx/sites-available/site1</code>)：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> site1.example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/site1;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">   <span class="attribute">server_name</span> interview.pages.etsuyou.cn;</span><br><span class="line"></span><br><span class="line">   <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="attribute">root</span> /var/www/interview;</span><br><span class="line">      <span class="attribute">index</span> index.html;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建符号链接</strong><br>将这些配置文件的符号链接放到 <code>sites-enabled</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/site1 /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></li><li><p><strong>创建网页目录并放置静态文件</strong><br>创建静态网页的目录并放置你的 HTML 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /var/www/site1</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /var/www/site2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将你的静态网页文件放到相应的目录中</span></span><br><span class="line">sudo <span class="built_in">cp</span> /path/to/your/site1/* /var/www/site1/</span><br><span class="line">sudo <span class="built_in">cp</span> /path/to/your/site2/* /var/www/site2/</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 Nginx 配置并重启服务</strong><br>检查 Nginx 配置是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><p>如果配置正确，重启 Nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 DNS</strong><br>确保你的域名 <code>site1.example.com</code> 和 <code>site2.example.com</code> 都指向你的公网 IP 地址。</p></li></ol><h3 id="方法二：使用子目录"><a href="#方法二：使用子目录" class="headerlink" title="方法二：使用子目录"></a>方法二：使用子目录</h3><p>如果不想使用域名，可以通过子目录来区分不同的静态网页。</p><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p><strong>配置 Nginx</strong><br>编辑默认的 Nginx 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>添加子目录配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_public_ip;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /site1/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/site1/;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /site2/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/site2/;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建网页目录并放置静态文件</strong><br>创建静态网页的目录并放置你的 HTML 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /var/www/site1</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /var/www/site2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将你的静态网页文件放到相应的目录中</span></span><br><span class="line">sudo <span class="built_in">cp</span> /path/to/your/site1/* /var/www/site1/</span><br><span class="line">sudo <span class="built_in">cp</span> /path/to/your/site2/* /var/www/site2/</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 Nginx 配置并重启服务</strong><br>检查 Nginx 配置是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><p>如果配置正确，重启 Nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li><li><p><strong>访问静态网页</strong><br>现在你可以通过以下 URL 访问你的静态网页：</p><ul><li><code>http://your_public_ip/site1/</code></li><li><code>http://your_public_ip/site2/</code></li></ul></li></ol><p>通过以上方法，你可以在一个 80 端口的公网 IP 上部署多个静态网页。选择使用虚拟主机还是子目录取决于你的具体需求和域名配置。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RESTful</title>
      <link href="/2024/06/26/RESTful/"/>
      <url>/2024/06/26/RESTful/</url>
      
        <content type="html"><![CDATA[<p>RESTful 是一种基于 HTTP 协议的架构风格，用于设计网络应用程序的 API。REST 代表 Representational State Transfer（表述性状态转移），它强调使用标准 HTTP 方法（如 GET、POST、PUT、DELETE 等）来操作资源。</p><span id="more"></span><h2 id="RESTful-API-的基本原则"><a href="#RESTful-API-的基本原则" class="headerlink" title="RESTful API 的基本原则"></a>RESTful API 的基本原则</h2><h3 id="1-资源（Resources）"><a href="#1-资源（Resources）" class="headerlink" title="1. 资源（Resources）"></a>1. 资源（Resources）</h3><ul><li>资源是网络上的对象，如用户、订单、商品等。每个资源通过一个 URI（统一资源标识符）进行标识。</li><li>例如，用户资源可以通过 <code>/users</code> 进行访问，特定用户可以通过 <code>/users/&#123;id&#125;</code> 进行访问。</li></ul><h3 id="2-HTTP-方法（HTTP-Methods）"><a href="#2-HTTP-方法（HTTP-Methods）" class="headerlink" title="2. HTTP 方法（HTTP Methods）"></a>2. HTTP 方法（HTTP Methods）</h3><ul><li>使用标准的 HTTP 方法来操作资源：<ul><li><code>GET</code>：读取资源</li><li><code>POST</code>：创建资源</li><li><code>PUT</code>：更新资源</li><li><code>DELETE</code>：删除资源</li><li><code>PATCH</code>：部分更新资源</li></ul></li></ul><h3 id="3-无状态（Stateless）"><a href="#3-无状态（Stateless）" class="headerlink" title="3. 无状态（Stateless）"></a>3. 无状态（Stateless）</h3><ul><li>每个请求都是独立的，服务器不存储客户端的状态。所有需要的状态信息都包含在请求中。</li></ul><h3 id="4-统一接口（Uniform-Interface）"><a href="#4-统一接口（Uniform-Interface）" class="headerlink" title="4. 统一接口（Uniform Interface）"></a>4. 统一接口（Uniform Interface）</h3><ul><li>通过一致的方式访问和操作资源，这包括统一的资源标识、资源操作方法、资源表示格式等。</li></ul><h3 id="5-表示（Representations）"><a href="#5-表示（Representations）" class="headerlink" title="5. 表示（Representations）"></a>5. 表示（Representations）</h3><ul><li>资源可以有多种表示形式，如 JSON、XML、HTML 等。客户端和服务器通过内容协商（Content Negotiation）确定使用哪种表示格式。</li></ul><h3 id="6-可缓存（Cacheable）"><a href="#6-可缓存（Cacheable）" class="headerlink" title="6. 可缓存（Cacheable）"></a>6. 可缓存（Cacheable）</h3><ul><li>服务器响应应指明是否可以缓存，缓存机制可以提高性能。</li></ul><h2 id="RESTful-API-示例"><a href="#RESTful-API-示例" class="headerlink" title="RESTful API 示例"></a>RESTful API 示例</h2><p>假设我们有一个管理用户的 RESTful API，以下是一些示例请求及其含义：</p><h3 id="1-获取所有用户"><a href="#1-获取所有用户" class="headerlink" title="1. 获取所有用户"></a>1. 获取所有用户</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /users</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bob&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="2-获取特定用户"><a href="#2-获取特定用户" class="headerlink" title="2. 获取特定用户"></a>2. 获取特定用户</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /users/1</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-创建新用户"><a href="#3-创建新用户" class="headerlink" title="3. 创建新用户"></a>3. 创建新用户</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /users</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Charlie&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">201 Created</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>/users/3</span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Charlie&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-更新用户信息"><a href="#4-更新用户信息" class="headerlink" title="4. 更新用户信息"></a>4. 更新用户信息</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /users/1</span><br></pre></td></tr></table></figure><p>请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice Smith&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200 OK</span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice Smith&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5. 删除用户"></a>5. 删除用户</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /users/1</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">204 No Content</span><br></pre></td></tr></table></figure><h2 id="RESTful-API-的优点"><a href="#RESTful-API-的优点" class="headerlink" title="RESTful API 的优点"></a>RESTful API 的优点</h2><ul><li><strong>简单性</strong>：使用标准的 HTTP 方法和状态码，易于理解和实现。</li><li><strong>灵活性</strong>：资源可以有多种表示形式，客户端和服务器可以独立演化。</li><li><strong>可扩展性</strong>：通过 URI 结构和查询参数，可以轻松扩展 API。</li></ul><h2 id="RESTful-API-的设计建议"><a href="#RESTful-API-的设计建议" class="headerlink" title="RESTful API 的设计建议"></a>RESTful API 的设计建议</h2><ol><li><strong>使用名词表示资源</strong>：URI 应该使用名词而不是动词。例如，使用 <code>/users</code> 而不是 <code>/getUsers</code>。</li><li><strong>使用合适的 HTTP 方法</strong>：根据操作类型选择合适的 HTTP 方法。</li><li><strong>使用状态码表示响应状态</strong>：如 <code>200 OK</code>、<code>201 Created</code>、<code>204 No Content</code>、<code>404 Not Found</code> 等。</li><li><strong>提供有意义的错误信息</strong>：在错误响应中提供详细的错误信息，帮助客户端理解问题。</li></ol><h2 id="RESTful-的特点"><a href="#RESTful-的特点" class="headerlink" title="RESTful 的特点"></a>RESTful 的特点</h2><p>RESTful 的主要特点包括：</p><h3 id="1-资源导向"><a href="#1-资源导向" class="headerlink" title="1. 资源导向"></a>1. 资源导向</h3><ul><li>在 REST 中，所有的内容都是资源，每个资源都有一个唯一的 URI（统一资源标识符）。通过 URI 来标识资源。</li></ul><h3 id="2-无状态性"><a href="#2-无状态性" class="headerlink" title="2. 无状态性"></a>2. 无状态性</h3><ul><li>每个请求从客户端到服务器必须包含理解该请求所需的所有信息。服务器不存储客户端的上下文，所有状态信息都保存在客户端。</li></ul><h3 id="3-统一接口"><a href="#3-统一接口" class="headerlink" title="3. 统一接口"></a>3. 统一接口</h3><ul><li>RESTful 服务使用标准的 HTTP 方法（如 GET、POST、PUT、DELETE）来执行操作。每种方法对应一种操作类型：<ul><li><strong>GET</strong>：检索资源</li><li><strong>POST</strong>：创建资源</li><li><strong>PUT</strong>：更新资源</li><li><strong>DELETE</strong>：删除资源</li></ul></li></ul><h3 id="4-表现层状态转移"><a href="#4-表现层状态转移" class="headerlink" title="4. 表现层状态转移"></a>4. 表现层状态转移</h3><ul><li>客户端与服务器之间的交互通过资源的表述（Representation）来进行。表述可以是 JSON、XML、HTML 等格式。</li></ul><h3 id="5-可缓存性"><a href="#5-可缓存性" class="headerlink" title="5. 可缓存性"></a>5. 可缓存性</h3><ul><li>服务器响应应指示响应是否是可缓存的，以提高性能。</li></ul><h3 id="6-分层系统"><a href="#6-分层系统" class="headerlink" title="6. 分层系统"></a>6. 分层系统</h3><ul><li>客户端通常不知道它是否直接连接到最终的服务器，还是连接到中间服务器（如代理服务器）。</li></ul><h3 id="7-按需代码（可选）"><a href="#7-按需代码（可选）" class="headerlink" title="7. 按需代码（可选）"></a>7. 按需代码（可选）</h3><ul><li>在某些情况下，服务器可以通过传输可执行代码（如 JavaScript）到客户端来扩展功能。</li></ul><h2 id="RESTful-服务示例"><a href="#RESTful-服务示例" class="headerlink" title="RESTful 服务示例"></a>RESTful 服务示例</h2><p>RESTful 服务的一个典型示例是一个博客系统的 API，可能包含以下 URI 和操作：</p><ul><li><code>GET /posts</code>：获取所有博客文章</li><li><code>GET /posts/&#123;id&#125;</code>：获取特定 ID 的博客文章</li><li><code>POST /posts</code>：创建一篇新的博客文章</li><li><code>PUT /posts/&#123;id&#125;</code>：更新特定 ID 的博客文章</li><li><code>DELETE /posts/&#123;id&#125;</code>：删除特定 ID 的博客文章</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RESTful 是一种广泛应用于现代 Web 开发的架构风格，通过遵循其原则和最佳实践，可以设计出简洁、灵活和可扩展的 API。它的主要优点包括简单性、灵活性和可扩展性，使得 RESTful API 成为现代 Web 服务设计的主流选择。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.runoob.com/w3cnote/restful-architecture.html">https://www.runoob.com/w3cnote/restful-architecture.html</a></li><li><a href="https://www.ruanyifeng.com/blog/2011/09/restful.html">https://www.ruanyifeng.com/blog/2011/09/restful.html</a></li><li><a href="https://apisix.apache.org/zh/blog/2023/02/08/what-is-restful-api/">https://apisix.apache.org/zh/blog/2023/02/08/what-is-restful-api/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>map_vs_object</title>
      <link href="/2024/06/26/map_vs_object/"/>
      <url>/2024/06/26/map_vs_object/</url>
      
        <content type="html"><![CDATA[<p>在 JavaScript 中，<code>Map</code> 和对象（<code>Object</code>）都是用于存储键值对的数据结构，但它们有一些关键的区别和各自的使用场景。以下是详细的比较：</p><span id="more"></span><h3 id="1-键的类型"><a href="#1-键的类型" class="headerlink" title="1. 键的类型"></a>1. 键的类型</h3><ul><li><p><strong>对象（Object）</strong>：对象的键必须是字符串或符号（Symbol）。如果使用其他类型（如数字或对象）作为键，会被自动转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj[<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;value&quot;</span>; <span class="comment">// 键被转换为字符串 &#x27;1&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="number">1</span>]); <span class="comment">// 输出 &#x27;value&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Map</strong>：<code>Map</code> 允许任何类型的键，包括对象、函数、原始类型等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> keyObj = &#123;&#125;;</span><br><span class="line">map.<span class="title function_">set</span>(keyObj, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(keyObj)); <span class="comment">// 输出 &#x27;value&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-键的顺序"><a href="#2-键的顺序" class="headerlink" title="2. 键的顺序"></a>2. 键的顺序</h3><ul><li><p><strong>对象（Object）</strong>：对象的键是无序的，尽管在现代 JavaScript 引擎中，键的插入顺序通常会被保留，但这不是规范保证的行为。</p></li><li><p><strong>Map</strong>：<code>Map</code> 保留键的插入顺序，迭代时会按照插入的顺序返回键值对。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value); <span class="comment">// 按照 &#x27;a&#x27;, &#x27;b&#x27; 的顺序输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-性能"><a href="#3-性能" class="headerlink" title="3. 性能"></a>3. 性能</h3><ul><li><strong>对象（Object）</strong>：对象在处理频繁的添加和删除操作时可能会有性能问题，特别是当对象变得非常大时。</li><li><strong>Map</strong>：<code>Map</code> 在频繁的增删操作中通常表现得更好，因为它是专门为这种用途设计的。</li></ul><h3 id="4-原型链"><a href="#4-原型链" class="headerlink" title="4. 原型链"></a>4. 原型链</h3><ul><li><p><strong>对象（Object）</strong>：对象有原型链，可能会继承原型链上的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">toString</span>); <span class="comment">// 输出 `function toString() &#123; [native code] &#125;`</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Map</strong>：<code>Map</code> 没有原型链问题，所有键值对都存储在 <code>Map</code> 实例中，不会从原型链继承属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">toString</span>); <span class="comment">// 输出 `undefined`</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-大小"><a href="#5-大小" class="headerlink" title="5. 大小"></a>5. 大小</h3><ul><li><p><strong>对象（Object）</strong>：没有直接的方法获取对象的大小（键值对的数量），通常需要手动计算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span>); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Map</strong>：<code>Map</code> 提供了 <code>size</code> 属性，可以直接获取键值对的数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-使用场景"><a href="#6-使用场景" class="headerlink" title="6. 使用场景"></a>6. 使用场景</h3><ul><li><strong>对象（Object）</strong>：适用于需要简单键值对存储且键为字符串的场景，或需要使用 JSON 序列化的场景。</li><li><strong>Map</strong>：适用于需要频繁增删键值对、键可以是任意类型、需要保持键的插入顺序的场景。</li></ul><h3 id="7-其他特性"><a href="#7-其他特性" class="headerlink" title="7. 其他特性"></a>7. 其他特性</h3><ul><li><strong>对象（Object）</strong>：对象可以通过字面量语法 <code>&#123;&#125;</code> 创建，非常简洁。</li><li><strong>Map</strong>：<code>Map</code> 提供了更多的方法，如 <code>set</code>、<code>get</code>、<code>has</code>、<code>delete</code>、<code>clear</code>、<code>forEach</code> 等，功能更丰富。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>对象示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj[<span class="string">&quot;key1&quot;</span>] = <span class="string">&quot;value1&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;key1&quot;</span>]); <span class="comment">// 输出 &#x27;value1&#x27;</span></span><br><span class="line"><span class="keyword">delete</span> obj[<span class="string">&quot;key1&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key1&quot;</span> <span class="keyword">in</span> obj); <span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><p>Map 示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;key1&quot;</span>)); <span class="comment">// 输出 &#x27;value1&#x27;</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;key1&quot;</span>)); <span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><p>综上所述，选择使用 <code>Map</code> 还是对象（<code>Object</code>）取决于具体的需求和使用场景：如果需要复杂的键类型和更高的性能，<code>Map</code> 是更好的选择；如果只需要简单的字符串键值对存储，对象（<code>Object</code>）可能更方便。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CORS</title>
      <link href="/2024/06/26/CORS/"/>
      <url>/2024/06/26/CORS/</url>
      
        <content type="html"><![CDATA[<p>CORS（Cross-Origin Resource Sharing，跨域资源共享）是一种浏览器机制，用于允许或限制从一个域（源）向另一个域（源）发起的请求。它通过设置 HTTP 头来控制哪些跨域请求是被允许的。</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于安全原因，浏览器默认阻止网页发起跨域请求。CORS 是一种安全策略，允许服务器声明哪些来源可以访问其资源，从而实现跨域请求。</p><h3 id="CORS-的基本概念"><a href="#CORS-的基本概念" class="headerlink" title="CORS 的基本概念"></a>CORS 的基本概念</h3><ul><li><strong>Origin（源）</strong>：由协议、域名和端口组成。比如，<code>https://example.com:443</code> 是一个源。</li><li><strong>Preflight Request（预检请求）</strong>：对于某些类型的跨域请求（如使用 <code>PUT</code> 或 <code>DELETE</code> 方法，或自定义的请求头），浏览器会先发送一个 <code>OPTIONS</code> 请求，以确定服务器是否允许实际请求。</li></ul><h3 id="CORS-的工作流程"><a href="#CORS-的工作流程" class="headerlink" title="CORS 的工作流程"></a>CORS 的工作流程</h3><ol><li><strong>简单请求</strong>：如果是简单请求（如使用 <code>GET</code> 或 <code>POST</code> 方法且不包含自定义头部），浏览器直接发送请求，并在请求头中包含 <code>Origin</code> 头部。</li><li><strong>预检请求</strong>：对于复杂请求，浏览器会先发送一个 <code>OPTIONS</code> 请求，包含 <code>Origin</code>、<code>Access-Control-Request-Method</code> 和 <code>Access-Control-Request-Headers</code> 头部。服务器响应后，浏览器根据响应头决定是否发送实际请求。</li></ol><h3 id="关键-HTTP-头"><a href="#关键-HTTP-头" class="headerlink" title="关键 HTTP 头"></a>关键 HTTP 头</h3><ul><li><p><strong>请求头</strong>：</p><ul><li><code>Origin</code>：表示发起请求的源。</li><li><code>Access-Control-Request-Method</code>：预检请求中使用，表示实际请求使用的方法。</li><li><code>Access-Control-Request-Headers</code>：预检请求中使用，表示实际请求包含的自定义头部。</li></ul></li><li><p><strong>响应头</strong>：</p><ul><li><code>Access-Control-Allow-Origin</code>：表示允许哪些源访问资源。可以是具体的源（如 <code>https://example.com</code>）或通配符 <code>*</code>（允许所有源）。</li><li><code>Access-Control-Allow-Methods</code>：表示允许哪些 HTTP 方法（如 <code>GET</code>, <code>POST</code>, <code>PUT</code> 等）。</li><li><code>Access-Control-Allow-Headers</code>：表示允许哪些自定义请求头。</li><li><code>Access-Control-Allow-Credentials</code>：表示是否允许发送凭据（如 cookies）。</li><li><code>Access-Control-Expose-Headers</code>：表示哪些头部可以暴露给浏览器。</li><li><code>Access-Control-Max-Age</code>：表示预检请求的结果可以缓存多长时间（秒）。</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>客户端请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/data</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.example.com</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://example.com</span><br></pre></td></tr></table></figure><p>服务器响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span> <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example data&quot;</span> <span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><p>客户端预检请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/api/data</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.example.com</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span><span class="punctuation">: </span>PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span><span class="punctuation">: </span>Content-Type</span><br></pre></td></tr></table></figure><p>服务器响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>Content-Type</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span><span class="punctuation">: </span>86400</span><br></pre></td></tr></table></figure><p>实际请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/api/data</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.example.com</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-haxe">&#123; <span class="string">&quot;data&quot;</span>: <span class="type"></span>&quot;<span class="keyword">new</span> <span class="type">data</span>&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>服务器响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line"><span class="language-haxe">&#123; <span class="string">&quot;data&quot;</span>: <span class="type"></span>&quot;<span class="keyword">new</span> <span class="type">data</span>&quot; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CORS 是一种浏览器机制，用于控制跨域请求的安全性。通过设置适当的 HTTP 头，服务器可以声明哪些源可以访问其资源，从而实现安全的跨域资源共享。在开发 Web 应用时，理解和正确配置 CORS 对于确保应用的安全性和正确性至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bearer_Token</title>
      <link href="/2024/06/26/Bearer_Token/"/>
      <url>/2024/06/26/Bearer_Token/</url>
      
        <content type="html"><![CDATA[<p>Bearer Token 是一种用于身份验证的安全令牌，通常在 HTTP 请求中使用，以便在客户端和服务器之间传递认证信息。Bearer Token 是 OAuth 2.0 标准的一部分，并且在许多现代 Web 应用程序中广泛使用。</p><span id="more"></span><h3 id="Bearer-Token-的基本概念"><a href="#Bearer-Token-的基本概念" class="headerlink" title="Bearer Token 的基本概念"></a>Bearer Token 的基本概念</h3><ul><li><strong>Bearer</strong>：表示持有者。Bearer Token 的持有者被认为是经过身份验证的用户或应用程序。</li><li><strong>Token</strong>：一个字符串，通常是随机生成的，携带用户的认证信息。</li></ul><h3 id="Bearer-Token-的工作原理"><a href="#Bearer-Token-的工作原理" class="headerlink" title="Bearer Token 的工作原理"></a>Bearer Token 的工作原理</h3><ol><li><strong>获取 Token</strong>：客户端（如 Web 应用、移动应用）通过某种方式（如用户名密码、OAuth 认证等）向认证服务器请求获取 Bearer Token。</li><li><strong>携带 Token</strong>：客户端在后续的每个请求中，将 Bearer Token 放在 HTTP 请求头中，通常是 <code>Authorization</code> 头。</li><li><strong>验证 Token</strong>：服务器接收到请求后，验证 Bearer Token 的有效性。如果 Token 有效，服务器将允许访问受保护的资源；否则，返回未授权的错误。</li></ol><h3 id="Bearer-Token-的使用示例"><a href="#Bearer-Token-的使用示例" class="headerlink" title="Bearer Token 的使用示例"></a>Bearer Token 的使用示例</h3><h4 id="获取-Token"><a href="#获取-Token" class="headerlink" title="获取 Token"></a>获取 Token</h4><p>客户端通过认证服务器获取 Bearer Token 的请求示例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/oauth/token</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>auth.example.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"><span class="language-dts">grant_<span class="attr">type</span><span class="operator">=</span>password<span class="variable">&amp;username</span>=user<span class="variable">&amp;password</span>=pass<span class="variable">&amp;client_id</span>=client<span class="variable">&amp;client_secret</span>=secret</span></span><br></pre></td></tr></table></figure><p>服务器返回的响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">3600</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="使用-Token"><a href="#使用-Token" class="headerlink" title="使用 Token"></a>使用 Token</h4><p>客户端在后续请求中携带 Bearer Token 的示例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/protected/resource</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.example.com</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</span><br></pre></td></tr></table></figure><h3 id="Bearer-Token-的优点"><a href="#Bearer-Token-的优点" class="headerlink" title="Bearer Token 的优点"></a>Bearer Token 的优点</h3><ol><li><strong>简洁</strong>：只需在请求头中包含一个 Token 字符串，易于实现和使用。</li><li><strong>灵活</strong>：可以与多种身份验证机制结合使用，如 OAuth 2.0、OpenID Connect 等。</li><li><strong>无状态</strong>：服务器不需要存储客户端的会话状态，Token 自带认证信息。</li></ol><h3 id="Bearer-Token-的安全性"><a href="#Bearer-Token-的安全性" class="headerlink" title="Bearer Token 的安全性"></a>Bearer Token 的安全性</h3><ol><li><strong>加密传输</strong>：始终通过 HTTPS 传输 Bearer Token，防止中间人攻击。</li><li><strong>Token 有效期</strong>：Token 通常有一个有效期，过期后需要重新获取，减少被滥用的风险。</li><li><strong>Token 撤销</strong>：支持 Token 撤销机制，允许在发现 Token 泄露或滥用时使其失效。</li><li><strong>Token 范围</strong>：使用 Token 范围（scope）限制 Token 的权限，确保最小权限原则。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Bearer Token 是一种广泛使用的身份验证机制，特别是在 OAuth 2.0 认证框架中。它通过在 HTTP 请求头中携带一个 Token 字符串，简化了客户端和服务器之间的身份验证过程。尽管 Bearer Token 提供了简洁和灵活的优点，但在使用时必须注意安全性，确保 Token 的安全传输和管理。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>显示首屏是什么？</title>
      <link href="/2024/06/26/%E6%98%BE%E7%A4%BA%E9%A6%96%E5%B1%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2024/06/26/%E6%98%BE%E7%A4%BA%E9%A6%96%E5%B1%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>“显示首屏”是指在用户访问一个网页时，浏览器首先呈现给用户的内容。这通常是指页面的可见部分（即不需要滚动就能看到的部分）。首屏的加载速度对用户体验至关重要，因为它决定了用户在访问网站时的第一印象。</p><span id="more"></span><h3 id="为什么首屏重要？"><a href="#为什么首屏重要？" class="headerlink" title="为什么首屏重要？"></a>为什么首屏重要？</h3><ol><li><strong>用户体验</strong>：用户更倾向于留在加载速度快的网站上。如果首屏加载时间过长，用户可能会选择离开。</li><li><strong>SEO</strong>：搜索引擎（如 Google）考虑页面加载速度作为排名因素。较快的首屏加载时间有助于提升搜索引擎排名。</li><li><strong>转换率</strong>：对于电商网站或其他需要用户操作的网站，较快的首屏加载时间通常会带来更高的转换率。</li></ol><h3 id="如何优化首屏加载时间？"><a href="#如何优化首屏加载时间？" class="headerlink" title="如何优化首屏加载时间？"></a>如何优化首屏加载时间？</h3><ol><li>**服务器端渲染 (SSR)**：如前所述，使用 SSR 可以在服务器上生成 HTML 内容，从而加快首屏的显示速度。</li><li><strong>代码拆分</strong>：将 JavaScript 文件按需加载，避免一次性加载所有代码。</li><li><strong>懒加载</strong>：延迟加载非首屏的图片和其他资源，确保首屏内容尽快显示。</li><li><strong>压缩和优化资源</strong>：压缩 CSS、JavaScript 和图片文件，减少文件大小。</li><li><strong>使用 CDN</strong>：通过内容分发网络 (CDN) 提供静态资源，加快资源加载速度。</li><li><strong>预加载关键资源</strong>：使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 标签预加载关键资源，如字体和关键 CSS 文件。</li></ol><h3 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h3><p>以下是一些具体的技术和方法，用于优化首屏加载时间：</p><h4 id="1-服务器端渲染-SSR"><a href="#1-服务器端渲染-SSR" class="headerlink" title="1. 服务器端渲染 (SSR)"></a>1. 服务器端渲染 (SSR)</h4><p>使用 Nuxt.js 进行服务器端渲染：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">ssr</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">  <span class="comment">// 其他配置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-代码拆分"><a href="#2-代码拆分" class="headerlink" title="2. 代码拆分"></a>2. 代码拆分</h4><p>在 Vue 项目中，可以使用动态导入来实现代码拆分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;./Component.vue&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="3-懒加载图片"><a href="#3-懒加载图片" class="headerlink" title="3. 懒加载图片"></a>3. 懒加载图片</h4><p>使用 Vue 的 <code>v-lazy</code> 指令或其他懒加载库：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy</span>=<span class="string">&quot;imageSrc&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Description&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-压缩资源"><a href="#4-压缩资源" class="headerlink" title="4. 压缩资源"></a>4. 压缩资源</h4><p>使用 Webpack 的插件来压缩 CSS 和 JavaScript：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">TerserPlugin</span>()],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-使用-CDN"><a href="#5-使用-CDN" class="headerlink" title="5. 使用 CDN"></a>5. 使用 CDN</h4><p>将静态资源托管到 CDN 上，并在 HTML 中引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.example.com/styles.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-预加载关键资源"><a href="#6-预加载关键资源" class="headerlink" title="6. 预加载关键资源"></a>6. 预加载关键资源</h4><p>在 HTML 中使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/path/to/critical.css&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/path/to/critical.js&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>通过这些方法，可以显著优化首屏加载时间，提升用户体验和网站性能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SPA是什么？</title>
      <link href="/2024/06/25/SPA%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2024/06/25/SPA%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><code>SPA</code> 是单页应用（Single Page Application）的缩写。单页应用是一种 web 应用结构，其中所有的功能和内容都在一个 HTML 页面中加载和动态更新，而不是在用户导航时重新加载整个页面。SPA 的核心思想是通过 JavaScript 来动态更新页面内容，从而提供更快的用户体验和更流畅的交互。</p><span id="more"></span><h3 id="SPA-的特点"><a href="#SPA-的特点" class="headerlink" title="SPA 的特点"></a>SPA 的特点</h3><ol><li><strong>单个 HTML 页面</strong>：整个应用只有一个 HTML 页面，所有的内容和功能通过 JavaScript 动态加载和更新。</li><li><strong>客户端渲染</strong>：大部分渲染工作在客户端（浏览器）进行，服务器主要负责提供数据 API。</li><li><strong>更快的用户体验</strong>：由于不需要每次导航都重新加载整个页面，用户体验更加流畅。</li><li><strong>路由管理</strong>：通过 JavaScript 来管理应用的路由，通常使用库如 Vue Router 或 React Router。</li></ol><h3 id="SPA-的优势"><a href="#SPA-的优势" class="headerlink" title="SPA 的优势"></a>SPA 的优势</h3><ol><li><strong>更快的响应速度</strong>：因为不需要每次导航都重新加载整个页面，响应速度更快。</li><li><strong>流畅的用户体验</strong>：页面切换和数据更新更加流畅，用户体验更好。</li><li><strong>减少服务器负载</strong>：服务器主要提供数据 API，减少了对服务器的压力。</li><li><strong>更好的开发体验</strong>：现代前端框架和工具（如 Vue.js、React、Angular）提供了强大的开发工具和生态系统，提升了开发效率。</li></ol><h3 id="SPA-的挑战"><a href="#SPA-的挑战" class="headerlink" title="SPA 的挑战"></a>SPA 的挑战</h3><ol><li><strong>SEO 问题</strong>：由于内容是通过 JavaScript 动态加载的，搜索引擎爬虫可能无法抓取页面内容，影响 SEO。</li><li><strong>首屏加载时间</strong>：由于需要加载大量的 JavaScript 文件，可能导致首屏加载时间较长。</li><li><strong>复杂的客户端逻辑</strong>：需要在客户端处理更多的逻辑，增加了开发和维护的复杂性。</li></ol><h3 id="Vue-js-中的-SPA-结构"><a href="#Vue-js-中的-SPA-结构" class="headerlink" title="Vue.js 中的 SPA 结构"></a>Vue.js 中的 SPA 结构</h3><p>使用 Vue.js 创建 SPA 通常包括以下几个主要部分：</p><ol><li><p><strong>项目结构</strong>：典型的 Vue.js 项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">├── public/</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src/</span><br><span class="line">│   ├── assets/</span><br><span class="line">│   ├── components/</span><br><span class="line">│   ├── router/</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── store/</span><br><span class="line">│   ├── views/</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">├── package.json</span><br><span class="line">└── vue.config.js</span><br></pre></td></tr></table></figure></li><li><p><strong>路由管理</strong>：使用 Vue Router 来管理应用的路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;../views/About.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li><p><strong>状态管理</strong>：使用 Pinia 或 Vuex 来管理应用的全局状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js (使用 Pinia)</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></li><li><p><strong>入口文件</strong>：在 <code>main.js</code> 中挂载 Vue 实例并配置路由和状态管理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="SPA-的优化"><a href="#SPA-的优化" class="headerlink" title="SPA 的优化"></a>SPA 的优化</h3><ol><li><p>代码拆分：使用动态导入和 Webpack 的代码拆分功能，按需加载模块，减少首屏加载时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../views/About.vue&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>懒加载组件：对于不需要立即加载的组件，使用懒加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComponent</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&quot;./components/AsyncComponent.vue&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>服务端渲染 (SSR)：结合 SSR 技术（如使用 Nuxt.js），改善 SEO 和首屏加载时间。</p></li></ol><p>通过这些方法，可以构建一个高性能的 SPA 应用，同时克服其固有的一些挑战。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客语法速查</title>
      <link href="/2024/06/25/hexo%E5%8D%9A%E5%AE%A2%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/"/>
      <url>/2024/06/25/hexo%E5%8D%9A%E5%AE%A2%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="文章变量"><a href="#文章变量" class="headerlink" title="文章变量"></a>文章变量</h2><p>文章变量可以定义在 md 文件的开头。可以定义文章的标题，时间，归档的标签，归档的分类，文章关键字，文章描述，文章出处以及文章的示例等。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo博客语法速查</span><br><span class="line">date: 2024-06-25 12:49:59</span><br><span class="line">tags: [技术, 速查, 笔记, 语法]</span><br><span class="line">desc: 一篇展示hexo的md语法格式的文章，主要用来自己速查</span><br><span class="line">keywords: 速查，语法，hexo</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> blog</span><br><span class="line">from: https://hexo.io/zh-cn/</span><br><span class="line"><span class="section"># demo: ../../../demos/201703/background.html</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h2><p>如果你想创建文章摘要用于向读者展示文章的核心内容，那么需要在文章摘要之后其他内容之前添加 HTML 注释标签 <code>&lt;!--more--&gt;</code></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><h2 id="警告块"><a href="#警告块" class="headerlink" title="警告块"></a>警告块</h2><p>使用警告块需要 <code>div</code> 标签和 <code>tip</code> 类名：</p><div class="tip">  在ECMAScript5的strict模式下，这种情况的this已经被规定不会指向全局对象了，而是undefined</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tip&quot;</span>&gt;</span></span><br><span class="line">  在ECMAScript5的strict模式下，这种情况的this已经被规定不会指向全局对象了，而是undefined</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="https://www.coursera.org/learn/deep-learning">Coursera 上的深度学习课程</a></li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [<span class="string">Coursera 上的深度学习课程</span>](<span class="link">https://www.coursera.org/learn/deep-learning</span>)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>从 md 的二级标题开始。</p><h2 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h2><p>Hexo-theme-bubuzou 评论插件由最开始的多说改成网易云跟帖，后面由于 8 月 1 号云跟帖暂停服务，所以现在又换成了畅言。请在 <code>theme/_config.yml</code> 文件中做如下配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">changyan:</span> <span class="string">bubuzou</span></span><br></pre></td></tr></table></figure><h2 id="归档页面显示所有文章"><a href="#归档页面显示所有文章" class="headerlink" title="归档页面显示所有文章"></a>归档页面显示所有文章</h2><p>需要安装<code>hexo-generator-archive</code>插件支持，然后在全局的<code>_config.yml</code>里配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">archive_generator:</span><br><span class="line">    per_page: 0</span><br><span class="line">    yearly: false</span><br><span class="line">    monthly: false</span><br><span class="line">    daily: false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 速查 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
